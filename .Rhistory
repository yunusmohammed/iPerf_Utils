log(100)
x <- 7
x
x=6
x
2 < 3
x <- c(1,3,2,10,5)
y<-1:5
x[1]
y[2:4]
x[x>3]
x[x>=3]
y
y+2
y
3*y
y*3
y^2
2^y
y <- 2*y
y
a <- c("apple", "banana", "orange")
a <- ("apple", "banana", "orange")
b <- c(TRUE, FALSE, TRUE)
type(1)
typeof(1)
typeof(1.0)
typeof("apple")
typeof(true)
typeof(True)
typeof(TRUE)
?sum
x <- c(1,3,2,10,5); y<- 1:5
x + y
x*y
sum(x)
sum(1,2,4)
z = c(1)
x + z
z <- c(1,2)
x+z
del z
x * y
max(x)
min(x)
sort(x)
x
sort(x, decreasing = T)
length(x)
x > 3
sum(x>3)
(1:length(x))[x>3]
(1:10)[x>6]
x = c(5,4,3,2,1)
(1:length(x))[x>3]
marathon <- read.csv("~/Desktop/Sophomore Spring/ENGRD 2700/Data Sets/marathon.csv")
View(marathon)
getwd()
View(marathon)
summary(marathon)
head(marathon), head(marathon,10)
head(marathon)
head(marathon,10)
tail(marathon)
tail(marathon,10)
attributes(marathon)
marathon$Year
marathon["Year"]
marathon[,2]
marathon[2,]
marathon$Time
marathon[2]
marathon[c(1,3,5),]
marathon$Year[1]
marathon$Year[29]
marathon["Year"][1]
plot(marathon$Year, marathon$Time)
plot(x,y)
ts.plot(marathon$Time)
?ts.plot()
ts.plot(marathon$Year, marathon$Time)
ts.plot(marathon$Time)
sleep
boxplot(sleep$extra)
subset(sleep, group=2)
subset(sleep, group=2)[,1]
subset(sleep, group==2)
subset(sleep, group==2)[,1]
subset(sleep, group==2)[1,]
subset(sleep, group==2 & extra > 1.5)
subset(sleep, group==2 | extra > 1.5)
group2 <- subset(sleep, group=2)
group2
group2 <- subset(sleep, group==2)
group2
group1 <- subset(sleep, group==1)
boxplot(group1$extra, group2$extra)
?hist
hist(group1)
hist(group1$extra)
hist(group1$extra, group2$extra)
hist(group2$extra)
hist(sleep$extra)
a = c(40,42,70,88,91,100, 111)
stem(a)
10 % 2
10 %% 2
10 %% 3
10 ** 2
3/2
3//2
10 */* 2
10 %/% 3
?round
class(28)
class(28.1)
typeof(28)
typeof(28.2)
typeof(28.245)
typeof('c')
typeof('chah')
typeof("chah")
round(0.544,2)
round(0.545,2)
round(0.545, digits=2)
round(0.546, digits=2)
round(0.546, digits=2)
ls()
my <- 0
ls()
a <- c(1,2,3)
class(a)
typeof(a)
c(1:5)
'football' == "football"
a = paste("a", 'b')
a
typeof(a)
class(a)
rev(c(3,2,4,5))
5 -
1
a <- 1:6
a + 1
die <- 1:6
die * die
die %*% die
die %o% die
round(3.)
round(3.5)
round(3.55, 1)
round(3.5, 0)
die
sample(die,1)
sample(die,1)
sample(die,1)
?sample
roll <- function() {
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE)
sum(dice)
}
roll
roll()
?roll
roll()
a <- roll()
a
a <- roll()
a
roll
?unique
state.division
pi
state.area >= 100000
state.area >= 100000 & state.area <= 200000
chevron <- read.csv("~/Desktop/Sophomore Spring/ENGRD 2700/Discussion/d2/CVX.csv")
View(chevron)
exxon <- read.csv("~/Desktop/Sophomore Spring/ENGRD 2700/Discussion/d2/XOM.csv")
View(exxon)
cvx <- read.csv("~/Desktop/Sophomore Spring/ENGRD 2700/Discussion/d2/CVX.csv")
View(cvx)
xom <- read.csv("~/Desktop/Sophomore Spring/ENGRD 2700/Discussion/d2/XOM.csv")
View(xom)
cvxClose <- cvx$Close
xomClose <- xom$Close
?search
?cbind2
?cbind
cbind(cvxClose, xomClose)
cbind2(cvxClose, xomClose)
cbind(cvxClose, xomClose)
cbind2(cvxClose, xomClose)
cbind2(cvxClose, xomClose)
cvxom <- cbind2(cvxClose, xomClose)
View(cvxom)
?ts.plot
ts.plot(cvxom)
colnames(cvxom) <- c("cvx", "xom")
View(cvxClose)
?ts.plot
ts.plot(cvxom)
?legend
?ts.plot
ts.plot(cvxom, gpars = list(xlab="Time", ylab="Close"))
ts.plot(cvxom, gpars = list(xlab="Time", ylab="Close"), col=astsa.col(.6)[6])
legend('topleft', col=c(6,4), lwd=2, legend=c("Land Only", "Ocean Only"), bg='white')
legend('topleft', col=c(6,3), lwd=2, legend=c("Land Only", "Ocean Only"), bg='white')
lines(gtemp_ocean, lwd=2, col=astsa.col(.6)[4])
lines(cvxom, lwd=2, col=astsa.col(.6)[4])
?tsplot
ts.plot(cvxom, gpars = list(xlab="Time", ylab="Close"), col=c(6,4))
ts.plot(cvxom, gpars = list(xlab="Time", ylab="Close"), col=c(6,3))
ts.plot(cvxom, gpars = list(xlab="Time", ylab="Close"), col=c(6,4))
ts.plot(cvxom, gpars = list(xlab="Time", ylab="Close"), col=c(5,4))
ts.plot(cvxom, gpars = list(xlab="Time", ylab="Close"), col=c(7,4))
ts.plot(cvxom, gpars = list(xlab="Time", ylab="Close"), col=c(8,4))
ts.plot(cvxom, gpars = list(xlab="Time", ylab="Close"), col=c(0,4))
ts.plot(cvxom, gpars = list(xlab="Time", ylab="Close"), col=c(2,4))
legend('topleft', col=c(2,4), lwd=2, legend=c("Chevron", "Exxon"), bg='white')
?plot
plot(cvxClose, xomClose)
?diff
cvxCloseDiff <- diff(cvxClose)
cvxomDiff <- diff(cvxom)
View(cvxomDiff)
ts.plot(cvxomDiff, gpars = list(xlab="Time", ylab="Close"), col=c(2,4))
legend('topleft', col=c(2,4), lwd=2, legend=c("Chevron", "Exxon"), bg='white')
ts.plot(cvxomDiff, gpars = list(xlab="Time", ylab="Change in Price"), col=c(2,4))
legend('topleft', col=c(2,4), lwd=2, legend=c("Chevron", "Exxon"), bg='white')
plot(cvxomDiff$cvx, cvxCloseDiff$xom)
xomCloseDiff <- diff(xomClose)
plot(cvxCloseDiff, xomCloseDiff)
abline(-6, 2)
abline(-1, 2)
plot(cvxCloseDiff, xomCloseDiff)
abline(-16, 0.5)
abline(-16, 1)
abline(-16, 2)
plot(cvxCloseDiff, xomCloseDiff)
?hist
hist(cvxCloseDiff)
cvxCloseDiffClean <- cvxCloseDiff[cvxCloseDiff >= -5]
cvxCloseDiffClean <- cvxCloseDiff[cvxCloseDiff >= -5 & cvxCloseDiff <= 5]
hist(cvxCloseDiffClean)
summary(cvxCloseDiff)
summary(cvxCloseClean)
summary(cvxCloseDiffClean)
hist(xomCloseDiff)
xomCloseDiffClean <- xomCloseDiff[ xomCloseDiff >=-4 & xomCloseDiff <= 4]
hist(xomCloseDiffClean)
summary(xomCloseDiff)
summary(xomCloseDiffClean)
boxplot(cvxCloseDiff ,xomCloseDiff)
boxplot(cvxCloseDiff ,xomCloseDiff, col=c(2,4))
legend('topleft', col=c(2,4), lwd=2, legend=c("Chevron", "Exxon"), bg='white')
boxplot(cvxCloseDiffClean ,xomCloseDiffClean, col=c(2,4))
legend('topleft', col=c(2,4), lwd=2, legend=c("Chevron Cleam", "Exxon Clean"), bg='white')
library(tidyverse)
library("tidyverse")
install.packages("tidyverse")
library("tidyverse")
?sd
?iqr
?cor
ln(2)
log(2)
1 - pexp(20, log(10)/10)
dexp(20, log(10)/10)
?integrate
Inf
integrate(pexp(x, log(10)/10), 20, Inf)
e
pnorm(115,100,15) - pnorm(85,100,15)
pnorm(1) - pnorm(-1)
x = seq(0,1,0.01)
y = dbeta(x, alpha, beta)
x = seq(0,1,0.01)
y = dbeta(x, 2, 5)
y2 = dbeta(x, alpha2, beta2)
y2 = dbeta(x, 5, 2)
y2 = dbeta(x, 5, 2)
plot(x, y, type="l")
lines(x, y2)
clear
plot(x, y, type="l")
x = seq(0,1,0.01)
y1 = dbeta(x, 1, 1)
y2 = dbeta(x, 2, 1)
y3 = dbeta(x, 3, 1)
y4 = dbeta(x, 0.5, 0.5)
plot(x, y1, type="l")
lines(x, y2)
lines(x, y3)
lines(x, y4)
Bwages <- read.csv("~/Desktop/Sophomore Spring/ENGRD 2700/HomeWork/Bwages.csv")
View(Bwages)
?hist
hist(Bwages$wage)
n = length(Bwages$wage)
qi = (1:n - 0.5)/n
mu = mean(Bwages$wage)
sigma = sd(Bwages$wage)
x = qnorm(qi, mu, sigma)
plot(x, sort(Bwages$wage))
abline(0, 1)
ln(1)
log(e)
log(10)
x = qlnorm()
x = qlnorm(qi, 2.31, 0.41)
plot(x, sort(Bwages$wage))
abline(0, 1)
y <- c(0.08, 0.54, 1.13, 1.57, 1.74)
y <- c(0.08, 0.54, 1.13, 1.57, 1.74)
?qunif
?qnorm
x <- c(0.1, 0.3, 0.5, 0.7, 0.9)
y <- c(0.08, 0.54, 1.13, 1.57, 1.74)
q <- c(0.1, 0.3, 0.5, 0.7, 0.9)
x <- qunif(q, min=0, max=2)
plot(x, y)
abline(0, 1)
precip <- read.csv("~/Desktop/Sophomore Spring/ENGRD 2700/Discussion/precip.csv")
View(precip)
n = length(precip)
n = length(precip$precip)
qi = (1:n - 0.5)/n
mu = mean(precip$precip)
sigma = sd(precip$precip)
x = qnorm(qi, mu, sigma)
plot(x, sort(precip))
plot(x, sort(precip$precip))
abline(0, 1)
precip <- read.csv("~/Desktop/Sophomore Spring/ENGRD 2700/Discussion/precip.csv")
View(precip)
qqnorm(precip$precip)
?cov
DataForSunglasses <- read.csv("~/Desktop/Sophomore Spring/ENGRD 2700/HomeWork/DataForSunglasses.csv")
View(DataForSunglasses)
plot(DataForSunglasses$Ice.Cream.Sales...,DataForSunglasses$Temperature.Celsius.)
cor(DataForSunglasses$Ice.Cream.Sales..., DataForSunglasses$Temperature.Celsius.)
plot(DataForSunglasses$Sunglass.Sales..., DataForSunglasses$Temperature.Celsius.)
cor(DataForSunglasses$Sunglass.Sales..., DataForSunglasses$Temperature.Celsius.)
plot(DataForSunglasses$Sunglass.Sales..., DataForSunglasses$Ice.Cream.Sales...)
cor(DataForSunglasses$Sunglass.Sales..., DataForSunglasses$Ice.Cream.Sales...)
?
cor
data = cars
View(data)
plot(data$speed, data$dist)
cov(data$speed, data$dist)
cor(data$speed, data$dist)
?pbinom
pbinom(100,1/2)
pbinom(0.46, 100,1/2)
pbinom(46, 100,1/2)
pbinom(50, 100,1/2)
pbinom(100, 100, 1/2)
pbinom(1, 100, 1/2)
pbinom(46, 100, 0.5)
pbinom(50, 100, 0.5)
pbinom(49, 100, 0.5)
pbinom(46, 100, 0.5)
?data.frame()
a <- data.frame(x = 8:23, y = c(31.60, 21.32, 16.13, 12.86, 9.05, 7.76, 1.62, 1.34, 1.17, 1.16, 1.11, 1.11, 1.11, 1.09, 1.09))
a <- data.frame(x = 8:22, y = c(31.60, 21.32, 16.13, 12.86, 9.05, 7.76, 1.62, 1.34, 1.17, 1.16, 1.11, 1.11, 1.11, 1.09, 1.09))
View(a)
View(a)
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "red", xlab = "x", ylab = "y")
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "green", xlab = "Cache Size [ = log(capacity in bytes)]", ylab = "Miss Rate")
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Cache Size [ = log(capacity in bytes)]", ylab = "Miss Rate")
?plot
?plot(0)
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Cache Size [ = log(capacity in bytes)]", ylab = "Miss Rate", ylim=40)
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Cache Size [ = log(capacity in bytes)]", ylab = "Miss Rate") + ylim(0, 40)
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Cache Size [ = log(capacity in bytes)]", ylab = "Miss Rate", ylim=c(0,40))
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Cache Size [ = log(capacity in bytes)]", ylab = "Miss Rate", ylim=c(0,35))
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Cache Size [ = log(capacity in bytes)]", ylab = "Miss Rate %", ylim=c(0,35), main = "Miss Rate vs Cache Size for Direct Mapped Cache")
y2 = c(33.46, 21.97, 16.73, 12.93, 8.9, 4.27, 4.56, 1.30, 1.25, 1.12, 1.11, 1.08, 1.08, 1.08, 1.08)
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Cache Size [ = log(capacity in bytes)]", ylab = "Miss Rate %", ylim=c(0,35), main = "Miss Rate vs Cache Size")
lines(x, y2, pch = 18, col = "red", type = "b", lty = 2)
lines(a$x, y2, pch = 18, col = "red", type = "b", lty = 2)
lines(a$x, y2, pch = 19, col = "red", type = "b", lty = 2)
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Cache Size [ = log(capacity in bytes)]", ylab = "Miss Rate %", ylim=c(0,35), main = "Miss Rate vs Cache Size")
lines(a$x, y2, pch = 18, col = "red", type = "b", lty = 2)
legend("topright", legend=c("Direct Mapped Cache", "2-Way Set Assoc"),
col=c("blue", "red"), lty = 1:2, cex=0.8, title="Cache Types")
y2 <- c(25.06, 16.62, 11.18, 10.46, 8.53, 2.66, 1.30, 1.12, 1.10, 1.07, 1.07, 1.07, 1.07, 1.07, 1.07)
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Cache Size [ = log(capacity in bytes)]", ylab = "Miss Rate %", ylim=c(0,35), main = "Miss Rate vs Cache Size")
lines(a$x, y2, pch = 18, col = "red", type = "b", lty = 2)
legend("topright", legend=c("Direct Mapped Cache", "2-Way Set Assoc"),
col=c("blue", "red"), lty = 1:2, cex=0.8, title="Cache Types")
a <- data.frame(x = 8:22, y = c(571712, 379136, 255168, 238656, 194688, 60736, 29568, 25600, 25152, 24448, 24448, 24448, 24448, 24448, 24448))
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Cache Size [ = log(capacity in bytes)]", ylab = "Traffic in Bytes")
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Cache Size [ = log(capacity in bytes)]", ylab = "Traffic in Bytes", ylim=c(0,600000), main = "Traffic vs Cache Size")
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Cache Size [ = log(capacity in bytes)]", ylab = "Traffic to Cache in Bytes", ylim=c(0,600000), main = "Traffic to Cache vs Cache Size")
a <- data.frame(x = 8:22, y = c(34968, 34968, 34968, 34968, 34968, 34968, 34968, 34968, 34968, 34968, 34968, 34968, 34968, 34968, 34968))
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Cache Size [ = log(capacity in bytes)]", ylab = "Traffic to Bus in Bytes", ylim=c(0,180000), main = "Traffic to Bus vs Cache Size")
y1 <- c(175360, 74816, 19712, 14464, 10432, 8320, 3904, 1088, 768, 0, 0, 0, 0, 0, 0)
lines(a$x, y1, pch = 18, col = "red", type = "b", lty = 2)
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Cache Size [ = log(capacity in bytes)]", ylab = "Traffic to Bus in Bytes", ylim=c(0,200000), main = "Traffic to Bus vs Cache Size")
lines(a$x, y1, pch = 18, col = "red", type = "b", lty = 2)
legend("topright", legend=c("Write-Through Cache", "Write-Back Cache"),
col=c("blue", "red"), lty = 1:2, cex=0.8, title="Write Policy")
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Cache Size [ = log(capacity in bytes)]", ylab = "Traffic to Bus in Bytes", ylim=c(0,200000), main = "Traffic to Bus vs Cache Size for 64B Blocksize 2-way Set Assoc Cache")
lines(a$x, y1, pch = 18, col = "red", type = "b", lty = 2)
legend("topright", legend=c("Write-Through", "Write-Back"),
col=c("blue", "red"), lty = 1:2, cex=0.8, title="Write Policy")
a <- data.frame(x = 2:13, y = c(5.63, 4.10, 3.02, 1.86, 1.12, 0.76, 0.60, 0.52, 0.52, 0.52, 0.59, 1.02, 1.45))
a <- data.frame(x = 2:14, y = c(5.63, 4.10, 3.02, 1.86, 1.12, 0.76, 0.60, 0.52, 0.52, 0.52, 0.59, 1.02, 1.45))
View(a)
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Block Size [ = log(block size in bytes)]", ylab = "Miss Rate %", ylim=c(0,6), main = "Miss Rate vs Block Size for 32KB 2-way Set Assoc Cache")
a <- data.frame(x = 2:14, y = c(8048, 11736, 17376, 21632, 26688, 37120, 62208, 114176, 228352, 446464, 1019904, 3653632, 10256384))
View(a)
a$y <- a$y / 35650
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Block Size [ = log(block size in bytes)]", ylab = "Bytes per Memory Reference (Bytes/Reference)", ylim=c(0,300), main = "Bytes per Memory Reference vs Block Size for 32KB 2-way Set Assoc Cache")
a <- data.frame(x = 2:14, y = c(5.63, 4.10, 3.02, 1.86, 1.12, 0.76, 0.60, 0.52, 0.52, 0.52, 0.59, 1.02, 1.45))
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Block Size [ = log(block size in bytes)]", ylab = "Miss Rate %", ylim=c(0,6), main = "Miss Rate vs Block Size for 32KB 2-way Set Assoc Cache")
y <- c(24.30, 22.74, 20.61, 12.25, 8.11, 6.25, 5.76, 4.78, 4.53, 5.38, 7.30, 8.86, 10.06)
lines(a$x, y, pch = 18, col = "red", type = "b", lty = 2)
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Block Size [ = log(block size in bytes)]", ylab = "Miss Rate %", ylim=c(0,25), main = "Miss Rate vs Block Size for 32KB 2-way Set Assoc Cache")
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Block Size [ = log(block size in bytes)]", ylab = "Miss Rate %", ylim=c(0,6), main = "Miss Rate vs Block Size for 32KB 2-way Set Assoc Cache for Core 0")
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Block Size [ = log(block size in bytes)]", ylab = "Miss Rate %", ylim=c(0,25), main = "Miss Rate vs Block Size for 32KB 2-way Set Assoc Cache for Core 0")
lines(a$x, y, pch = 18, col = "red", type = "b", lty = 2)
z <- c(31.76, 30.06, 27.26, 17.57, 13.29, 11.56, 11.45, 12.10, 14.46, 20.00, 30.59, 45.94, 69.05)
lines(a$x, z, pch = 18, col = "purple", type = "b", lty = 2)
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Block Size [ = log(block size in bytes)]", ylab = "Miss Rate %", ylim=c(0,70), main = "Miss Rate vs Block Size for 32KB 2-way Set Assoc Cache for Core 0")
lines(a$x, y, pch = 18, col = "red", type = "b", lty = 2)
lines(a$x, z, pch = 18, col = "purple", type = "b", lty = 2)
?legend
legend("topleft", legend=c("1 Core", "2 Cores with VI Coherence Protocol", "4 Cores with VI Coherence Protocol"),
col=c("blue", "red", "purple"), lty = 1:2, cex=0.8, title="Coherence Protocol and Number of Cores")
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Block Size [ = log(block size in bytes)]", ylab = "Miss Rate %", ylim=c(0,70), main = "Miss Rate vs Block Size for 32KB 2-way Set Assoc Cache for Core 0")
lines(a$x, y, pch = 18, col = "red", type = "b", lty = 2)
lines(a$x, z, pch = 18, col = "purple", type = "c", lty = 3)
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Block Size [ = log(block size in bytes)]", ylab = "Miss Rate %", ylim=c(0,70), main = "Miss Rate vs Block Size for 32KB 2-way Set Assoc Cache for Core 0")
lines(a$x, y, pch = 18, col = "red", type = "b", lty = 2)
lines(a$x, z, pch = 18, col = "purple", type = "b", lty = 3)
legend("topleft", legend=c("1 Core", "2 Cores with VI Coherence Protocol", "4 Cores with VI Coherence Protocol"),
col=c("blue", "red", "purple"), lty = 1:3, cex=0.8, title="Coherence Protocol and Number of Cores")
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Block Size [ = log(block size in bytes)]", ylab = "Miss Rate %", ylim=c(0,70), main = "Miss Rate vs Block Size for 32KB 2-way Set Assoc Cache for Core 0")
plot(a$x, a$y, type = "b", frame = FALSE, pch = 19, col = "blue", xlab = "Block Size [ = log(block size in bytes)]", ylab = "Miss Rate %", ylim=c(0,50), main = "Miss Rate vs Block Size for 32KB 2-way Set Assoc Cache for Core 0")
y <- c(7.91, 6.37, 5.06, 3.20, 2.17, 1.71, 1.75, 1.75, 2.10, 3.06, 5.08, 7.49, 12.45)
z <- c(10.57, 9.01, 7.33, 4.76, 3.66, 3.24, 3.84, 4.68, 6.29, 9.83, 19.20, 34.00, 45.69)
lines(a$x, y, pch = 18, col = "red", type = "b", lty = 2)
lines(a$x, z, pch = 18, col = "purple", type = "b", lty = 3)
legend("topleft", legend=c("1 Core", "2 Cores with MSI Coherence Protocol", "4 Cores with MSI Coherence Protocol"),
col=c("blue", "red", "purple"), lty = 1:3, cex=0.8, title="Coherence Protocol and Number of Cores")
### Starter code for assignment
#behind the scenes libraries
library(tidyverse)
library(sf)
library(tidycensus)
install.packages("tidycensus", dep=T)
install.packages("sf", dep=T)
### Starter code for assignment
#behind the scenes libraries
library(tidyverse)
library(sf)
library(tidycensus)
#avoid scientific notiation
options(scipen = 99)
#store API key
census_api_key("d1098bc1212952dfa27f8c44070be68930f4ebd9")
load("~/Downloads/lab-3-problem-set.RData")
load("./Downloads/lab-3-problem-set.RData")
med_hh_inc <- get_acs("county",year = 2019, variables = "B19013_001")
View(spending)
View(med_hh_inc)
med_hh_inc <- med_hh_inc %>%
select(GEOID = GEOID,NAME = NAME, med_hh_inc = estimate, moe = moe)
str_detect("Yunus", "nus")
str_detect("Yunus", "nusi")
med_hh_inc <- med_hh_inc %>%
filter(str_detect(NAME, "New York"))
ggplot(med_hh_inc, aes(x = NAME, y=med_hh_inc)) + geom_bar()
ggplot(med_hh_inc, aes(x = NAME)) + geom_bar()
ggplot(med_hh_inc, aes(x = GEOID)) + geom_bar()
#load lab 3 workspace
load("./Downloads/lab-3-problem-set.RData")
spending$GEOID <- parse_number(spending$GEOID)
spending$GEOID <- parse_number(spending$GEOID)
spending_f <- spending %>%
filter(GEOID == 42101 | GEOID == 06075)
View(spending_f)
spending_f <- spending_f %>% drop_na()
ggplot(spending_f, aes(date, spend_all))+
geom_line(aes(color=county))
spending_f <- spending %>%
filter(GEOID == 36059 | GEOID == 36079| GEOID == 60240 | GEOID == 36003 | GEOID == 36005)
spending_f <- spending_f %>% drop_na()
ggplot(spending_f, aes(date, spend_all))+
geom_line(aes(color=county))+
geom_vline(xintercept = as.Date("2020-03-27"), color="black")
spending_f <- spending %>%
filter(GEOID == 36003 | GEOID == 36005)
spending_f <- spending %>%
filter(GEOID == 60240)
fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
